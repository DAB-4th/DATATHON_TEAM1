{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNxyjKpCCmcu+dj5l+4aigZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Bsb7fU2dVJid","executionInfo":{"status":"ok","timestamp":1745384998213,"user_tz":-540,"elapsed":5028,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy.stats import ttest_ind\n","from google.colab import files"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib.font_manager as fm\n","\n","# Install the missing font\n","!apt-get update\n","!apt-get install -y fonts-nanum\n","# Update font cache\n","!fc-cache -fv\n","\n","\n","# ÏÑ§ÏπòÎêú ÎÇòÎàîÍ≥†Îîï Í≤ΩÎ°ú\n","font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'  # Verify this path if needed\n","font_name = fm.FontProperties(fname=font_path).get_name()\n","\n","# Í∞ïÏ†ú Ï†ÅÏö©\n","plt.rcParams['font.family'] = font_name\n","plt.rcParams['axes.unicode_minus'] = False\n","\n","# ÌôïÏù∏\n","print(\"‚úÖ ÌòÑÏû¨ ÏÑ§Ï†ïÎêú Ìè∞Ìä∏:\", plt.rcParams['font.family'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QAAv45x6VP0Y","executionInfo":{"status":"ok","timestamp":1745385079127,"user_tz":-540,"elapsed":20756,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}},"outputId":"86c2861e-1acd-4fbc-c483-fa709f97a4ed"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["\r0% [Working]\r            \rHit:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n","Get:2 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,628 B]\n","Hit:3 http://archive.ubuntu.com/ubuntu jammy InRelease\n","Get:4 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n","Get:5 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n","Get:6 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]\n","Get:7 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [8,845 kB]\n","Get:8 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [2,837 kB]\n","Hit:9 http://archive.ubuntu.com/ubuntu jammy-backports InRelease\n","Get:10 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [4,266 kB]\n","Hit:11 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n","Hit:12 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n","Hit:13 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n","Get:14 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,243 kB]\n","Get:15 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [4,104 kB]\n","Get:16 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [3,150 kB]\n","Get:17 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,696 kB]\n","Fetched 27.4 MB in 5s (5,150 kB/s)\n","Reading package lists... Done\n","W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 35 not upgraded.\n","Need to get 10.3 MB of archives.\n","After this operation, 34.1 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fonts-nanum all 20200506-1 [10.3 MB]\n","Fetched 10.3 MB in 3s (3,999 kB/s)\n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 126333 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20200506-1_all.deb ...\n","Unpacking fonts-nanum (20200506-1) ...\n","Setting up fonts-nanum (20200506-1) ...\n","Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/usr/share/fonts/truetype: skipping, looped directory detected\n","/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n","/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n","/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n","‚úÖ ÌòÑÏû¨ ÏÑ§Ï†ïÎêú Ìè∞Ìä∏: ['NanumGothic']\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib.font_manager as fm\n","\n","# ÏÑ§ÏπòÎêú ÎÇòÎàîÍ≥†Îîï Í≤ΩÎ°ú\n","font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'  # Verify this path if needed\n","fontprop = fm.FontProperties(fname=font_path)\n","\n","plt.figure(figsize=(4, 3))\n","\n","# Apply font properties before creating text elements\n","plt.title(\"üî• ÎìúÎîîÏñ¥ ÌïúÍ∏Ä ÎÇòÏôÄÏïº Ìï®\", fontproperties=fontprop)\n","plt.xlabel(\"XÏ∂ï\", fontproperties=fontprop)\n","plt.ylabel(\"YÏ∂ï\", fontproperties=fontprop)\n","\n","plt.plot([1, 2, 3], [5, 20, 10])\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"fYGApY19W3wW","executionInfo":{"status":"ok","timestamp":1745385211395,"user_tz":-540,"elapsed":587,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}},"outputId":"967c662a-1e07-4244-f270-49715cea37a6"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128293 (\\N{FIRE}) missing from font(s) NanumGothic.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 1. ÎùºÏù¥Î∏åÎü¨Î¶¨ Î∂àÎü¨Ïò§Í∏∞\n","import pandas as pd\n","from google.colab import files\n","\n","# 2. ÏóëÏÖÄ ÌååÏùº ÏóÖÎ°úÎìú\n","print(\"üìÇ ÏóëÏÖÄ ÌååÏùº (.xlsx)ÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî\")\n","uploaded = files.upload()\n","\n","# 3. ÌååÏùº Í≤ΩÎ°ú Ï∂îÏ∂ú\n","excel_path = list(uploaded.keys())[0]\n","\n","# 4. ÏãúÌä∏Î≥Ñ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ (ÏïºÏàò_vf, Ìà¨Ïàò_vf)\n","batter_df = pd.read_excel(excel_path, sheet_name='ÏïºÏàò_vf')\n","pitcher_df = pd.read_excel(excel_path, sheet_name='Ìà¨Ïàò_vf')\n","\n","# 5. WAR Í≥ÑÏÇ∞ (ÏïºÏàò: oWAR + dWAR, Ìà¨Ïàò: Ï¢ÖÌï© WAR)\n","batter_df['total_WAR'] = batter_df['oWAR'] + batter_df['dWAR']\n","batter_df_clean = batter_df.dropna(subset=['total_WAR', 'Ïó∞Î¥â'])\n","\n","pitcher_df = pitcher_df.rename(columns={'Ï¢ÖÌï© WAR': 'total_WAR'})\n","pitcher_df_clean = pitcher_df.dropna(subset=['total_WAR', 'Ïó∞Î¥â'])\n","\n","# 6. ÌÜµÌï© Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑ ÏÉùÏÑ±\n","combined_df = pd.concat([\n","    batter_df_clean[['ÏÑ†ÏàòÎ™Ö', 'FAÎÖÑÎèÑ', 'total_WAR', 'Ïó∞Î¥â']],\n","    pitcher_df_clean[['ÏÑ†ÏàòÎ™Ö', 'FAÎÖÑÎèÑ', 'total_WAR', 'Ïó∞Î¥â']]\n","])\n","\n","# 7. Í∏∞Ï§Ä WAR 5 Ïù¥ÏÉÅ Ïó¨Î∂Ä Ïª¨Îüº ÏÉùÏÑ±\n","combined_df['WAR_5_or_more'] = combined_df['total_WAR'] >= 5\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"id":"nWmBIcUVXdOz","executionInfo":{"status":"ok","timestamp":1745385745669,"user_tz":-540,"elapsed":13362,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}},"outputId":"bb596c7f-100a-4440-bf71-39c7336d2780"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["üìÇ ÏóëÏÖÄ ÌååÏùº (.xlsx)ÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f9e6a761-15a8-421c-97f8-42f2d59cd5e3\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f9e6a761-15a8-421c-97f8-42f2d59cd5e3\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving KBO FA ·Ñâ·Ö≥·Üº·Ñã·Öµ·Ü´ ·Ñâ·Ö•·Ü´·Ñâ·ÖÆ ·ÑÜ·Öß·Üº·ÑÉ·Ö°·Ü´(2013~2024).xlsx to KBO FA ·Ñâ·Ö≥·Üº·Ñã·Öµ·Ü´ ·Ñâ·Ö•·Ü´·Ñâ·ÖÆ ·ÑÜ·Öß·Üº·ÑÉ·Ö°·Ü´(2013~2024).xlsx\n"]}]},{"cell_type":"code","source":["# ‚úÖ ÏïºÏàò + Ìà¨Ïàò Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑ ÌÜµÌï© Î∞è Ï†ÑÏ≤òÎ¶¨ (ÏóëÏÖÄ Í∏∞Î∞ò)\n","import pandas as pd\n","\n","# ÏïºÏàò: oWAR + dWAR Í≥ÑÏÇ∞\n","batter_df['total_WAR'] = batter_df['oWAR'] + batter_df['dWAR']\n","batter_df_clean = batter_df.dropna(subset=['total_WAR', 'Ïó∞Î¥â'])\n","\n","# Ìà¨Ïàò: 'Ï¢ÖÌï© WAR' ‚Üí 'total_WAR'Î°ú Î≥ÄÍ≤Ω\n","pitcher_df = pitcher_df.rename(columns={'Ï¢ÖÌï© WAR': 'total_WAR'})\n","pitcher_df_clean = pitcher_df.dropna(subset=['total_WAR', 'Ïó∞Î¥â'])\n","\n","# ‚úÖ ÌïòÎÇòÎ°ú Ìï©ÏπòÍ∏∞\n","combined_df = pd.concat([\n","    batter_df_clean[['ÏÑ†ÏàòÎ™Ö', 'FAÎÖÑÎèÑ', 'total_WAR', 'Ïó∞Î¥â']],\n","    pitcher_df_clean[['ÏÑ†ÏàòÎ™Ö', 'FAÎÖÑÎèÑ', 'total_WAR', 'Ïó∞Î¥â']]\n","])\n","\n","# ‚úÖ WAR 5 Ïù¥ÏÉÅ Ïó¨Î∂Ä Ïª¨Îüº ÏÉùÏÑ±\n","combined_df['WAR_5_or_more'] = combined_df['total_WAR'] >= 5"],"metadata":{"id":"AGqSexCnXRlJ","executionInfo":{"status":"ok","timestamp":1745385859785,"user_tz":-540,"elapsed":39,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import matplotlib.font_manager as fm\n","\n","# ‚úÖ ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï\n","font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'\n","fontprop = fm.FontProperties(fname=font_path)\n","plt.rcParams['font.family'] = fontprop.get_name()\n","plt.rcParams['axes.unicode_minus'] = False\n","\n","# ‚úÖ Ï†ÑÏ≤òÎ¶¨: bool ‚Üí str Î≥ÄÌôò (ÏÉâÏÉÅ Íµ¨Î∂Ñ ÏúÑÌï¥ ÌïÑÏöî)\n","combined_df['WAR_5_or_more_str'] = combined_df['WAR_5_or_more'].astype(str)\n","\n","# ‚úÖ ÏÉâÏÉÅ ÌåîÎ†àÌä∏ ÏÑ§Ï†ï (True: ÌååÎûë, False: Ï£ºÌô©)\n","palette = {'True': '#1f77b4', 'False': '#ff7f0e'}\n","\n","# ‚úÖ Î∞ïÏä§ÌîåÎ°Ø Í∑∏Î¶¨Í∏∞\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(data=combined_df,\n","            x='WAR_5_or_more_str',\n","            y='Ïó∞Î¥â',\n","            palette=palette)\n","\n","# ‚úÖ ÎùºÎ≤® Î∞è Ï†úÎ™©\n","plt.title(\"FA ÏßÅÏ†Ñ ÏãúÏ¶å WAR 5 Ïù¥ÏÉÅ Ïó¨Î∂ÄÏóê Îî∞Î•∏ Í≥ÑÏïΩÍ∏à Î∂ÑÌè¨\")\n","plt.xlabel(\"WAR ‚â• 5\")\n","plt.ylabel(\"Í≥ÑÏïΩÍ∏à (Îã®ÏúÑ: Ï≤ú Ïõê)\")\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RVTTOI1aXE29","executionInfo":{"status":"ok","timestamp":1745385889229,"user_tz":-540,"elapsed":683,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}},"outputId":"6f994f73-c817-4e14-d9ad-34a37b1d07d8"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-9-d3c636eae76e>:19: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.boxplot(data=combined_df,\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 44228 (\\N{HANGUL SYLLABLE GYE}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 50557 (\\N{HANGUL SYLLABLE YAG}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 44552 (\\N{HANGUL SYLLABLE GEUM}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 50948 (\\N{HANGUL SYLLABLE WI}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 51649 (\\N{HANGUL SYLLABLE JIG}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 51204 (\\N{HANGUL SYLLABLE JEON}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 51596 (\\N{HANGUL SYLLABLE JEUN}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 51060 (\\N{HANGUL SYLLABLE I}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 46384 (\\N{HANGUL SYLLABLE DDA}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 47480 (\\N{HANGUL SYLLABLE REUN}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 48516 (\\N{HANGUL SYLLABLE BUN}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","<ipython-input-9-d3c636eae76e>:29: UserWarning: Glyph 54252 (\\N{HANGUL SYLLABLE PO}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44228 (\\N{HANGUL SYLLABLE GYE}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50557 (\\N{HANGUL SYLLABLE YAG}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44552 (\\N{HANGUL SYLLABLE GEUM}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50948 (\\N{HANGUL SYLLABLE WI}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51649 (\\N{HANGUL SYLLABLE JIG}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51204 (\\N{HANGUL SYLLABLE JEON}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51596 (\\N{HANGUL SYLLABLE JEUN}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51060 (\\N{HANGUL SYLLABLE I}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46384 (\\N{HANGUL SYLLABLE DDA}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47480 (\\N{HANGUL SYLLABLE REUN}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48516 (\\N{HANGUL SYLLABLE BUN}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54252 (\\N{HANGUL SYLLABLE PO}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["thresholds = [round(x * 0.5, 1) for x in range(2, 15)]  # 1.0 ~ 7.0\n","\n","results = []\n","for thresh in thresholds:\n","    group_high = combined_df[combined_df['total_WAR'] >= thresh]['Ïó∞Î¥â']\n","    group_low = combined_df[combined_df['total_WAR'] < thresh]['Ïó∞Î¥â']\n","    if len(group_high) > 5 and len(group_low) > 5:\n","        t_stat, p_value = ttest_ind(group_high, group_low, equal_var=False)\n","        results.append({\n","            'Í∏∞Ï§Ä WAR': thresh,\n","            'Í≥†WAR ÌèâÍ∑†': round(group_high.mean(), 2),\n","            'Ï†ÄWAR ÌèâÍ∑†': round(group_low.mean(), 2),\n","            'TÌÜµÍ≥ÑÎüâ': round(t_stat, 4),\n","            'pÍ∞í': p_value\n","        })\n","\n","result_df = pd.DataFrame(results)\n","\n","# STEP 8: Í≤∞Í≥º ÏãúÍ∞ÅÌôî\n","plt.figure(figsize=(8, 5))\n","plt.plot(result_df['Í∏∞Ï§Ä WAR'], result_df['pÍ∞í'], marker='o')\n","plt.axhline(0.05, color='red', linestyle='--', label='Ïú†ÏùòÏàòÏ§Ä 0.05')\n","plt.title('Í∏∞Ï§Ä WAR Î≥ÄÌôîÏóê Îî∞Î•∏ Í≥ÑÏïΩÍ∏à Ïú†ÏùòÏÑ± (pÍ∞í)')\n","plt.xlabel('Í∏∞Ï§Ä WAR')\n","plt.ylabel('pÍ∞í')\n","plt.grid(True)\n","plt.legend()\n","plt.tight_layout()\n","plt.show()\n","\n","# STEP 9: Í≤∞Í≥º Ï∂úÎ†•\n","print(\"üìä Í∏∞Ï§Ä WARÎ≥Ñ ÌÜµÍ≥Ñ Î∂ÑÏÑù Í≤∞Í≥º:\")\n","print(result_df.to_string(index=False))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":767},"id":"M5yJdjyBXwdX","executionInfo":{"status":"ok","timestamp":1745289678431,"user_tz":-540,"elapsed":403,"user":{"displayName":"Lora Shin","userId":"17082304131460234065"}},"outputId":"89fb000d-c500-423a-cf11-4e36aca72aef"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["üìä Í∏∞Ï§Ä WARÎ≥Ñ ÌÜµÍ≥Ñ Î∂ÑÏÑù Í≤∞Í≥º:\n"," Í∏∞Ï§Ä WAR   Í≥†WAR ÌèâÍ∑†  Ï†ÄWAR ÌèâÍ∑†   TÌÜµÍ≥ÑÎüâ           pÍ∞í\n","    1.0  43934.40 22131.01 9.6893 4.738120e-21\n","    1.5  46865.23 24177.71 9.1387 5.766200e-19\n","    2.0  48961.61 26539.25 8.3406 4.994696e-16\n","    2.5  52060.50 28161.90 7.8891 2.703567e-14\n","    3.0  57226.68 29422.93 7.5617 6.716604e-13\n","    3.5  61759.22 30870.69 7.0142 4.685045e-11\n","    4.0  62184.05 32314.46 6.0616 1.257810e-08\n","    4.5  69740.47 32633.38 6.1695 1.621266e-08\n","    5.0  73645.93 33731.82 5.3111 1.485174e-06\n","    5.5  79823.30 34338.02 4.6505 3.097159e-05\n","    6.0  87238.77 34754.28 4.5640 7.578678e-05\n","    6.5 104923.23 35674.26 3.1799 7.859783e-03\n","    7.0 105000.33 36291.96 1.9564 1.076210e-01\n"]}]}]}